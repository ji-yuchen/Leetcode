/*
Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 /*DFS*/
class Solution {
public:
    int maxDepth(TreeNode* root) {
        int result = 0;
        if(root == NULL)
            return result;
        else
            return max(maxDepth(root->left), maxDepth(root->right)) + 1;
    }

};

/*BFS*/
class Solution {
public:
    int maxDepth(TreeNode* root) {
        int result = 0;
        if(root == NULL)
            return result;
        queue<TreeNode *> q;
        q.push(root);
        while(!q.empty()){
            result++;
            for(int i = 0, n = q.size(); i < n; i++){
                TreeNode *p = q.front();
                q.pop();
                if(p->left){
                    q.push(p->left);
                }
                if(p->right){
                    q.push(p->right);
                }
            }            
        }
        return result;
    }

};
